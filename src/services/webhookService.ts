
export interface WebhookContact {
  name: string;
  email: string;
  company: string;
}

// Mock HTML email generation function
const generateMockEmailHTML = (candidateName: string, contacts: WebhookContact[]): string => {
  const companyNames = contacts.map(c => c.company).join(', ');
  const contactNames = contacts.map(c => c.name).join(', ');
  
  return `
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Candidate Introduction - ${candidateName}</title>
  <style>
    body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
    .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 8px 8px 0 0; text-align: center; }
    .content { background: #ffffff; padding: 30px; border: 1px solid #e1e5e9; border-top: none; }
    .footer { background: #f8f9fa; padding: 20px; border-radius: 0 0 8px 8px; border: 1px solid #e1e5e9; border-top: none; text-align: center; font-size: 14px; color: #6c757d; }
    .highlight { background: #fff3cd; padding: 15px; border-left: 4px solid #ffc107; margin: 20px 0; border-radius: 4px; }
    .cta-button { display: inline-block; background: #007bff; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; font-weight: 600; margin: 20px 0; }
    .signature { margin-top: 30px; font-style: italic; }
    h1 { margin: 0; font-size: 24px; }
    h2 { color: #495057; margin-top: 25px; }
    p { margin: 15px 0; }
    ul { margin: 15px 0; padding-left: 20px; }
    li { margin: 8px 0; }
  </style>
</head>
<body>
  <div class="header">
    <h1>ðŸš€ Top Talent Alert</h1>
    <p>Exclusive candidate introduction for ${companyNames}</p>
  </div>
  
  <div class="content">
    <p>Hi ${contactNames},</p>
    
    <p>Hope you're crushing it! ðŸ‘‹</p>
    
    <p>I've got someone special I want to introduce you to â€“ <strong>${candidateName}</strong> â€“ and I think they could be exactly what you're looking for.</p>
    
    <div class="highlight">
      <h2>Why ${candidateName} stands out:</h2>
      <ul>
        <li><strong>Proven track record</strong> in their field with measurable results</li>
        <li><strong>Perfect cultural fit</strong> for your team dynamics</li>
        <li><strong>Ready to hit the ground running</strong> from day one</li>
        <li><strong>Open to new opportunities</strong> and excited about growth</li>
      </ul>
    </div>
    
    <p>I've worked with ${candidateName} before and can vouch for their professionalism, work ethic, and ability to deliver. They're the kind of person who makes everyone around them better.</p>
    
    <p>Would you be interested in a quick 15-minute call to discuss how ${candidateName} could contribute to your team? I can arrange something that works with your schedule.</p>
    
    <div style="text-align: center;">
      <a href="mailto:nikola@recruitica.com?subject=Interested in ${candidateName}&body=Hi Nikola, I'd like to learn more about ${candidateName}. When works for a call?" class="cta-button">
        Let's Talk About ${candidateName}
      </a>
    </div>
    
    <p>No pressure if the timing isn't right â€“ just thought I'd reach out since I know you're always looking for top talent.</p>
    
    <div class="signature">
      <p>Best,<br>
      Nikola<br>
      Partner, Recruitica<br>
      ðŸ“§ nikola@recruitica.com<br>
      ðŸ“± +1 (555) 123-4567</p>
    </div>
  </div>
  
  <div class="footer">
    <p>This email was generated by Recruitica's AI-powered recruitment platform</p>
    <p>Â© 2024 Recruitica. All rights reserved.</p>
  </div>
</body>
</html>
  `.trim();
};

export interface WebhookData {
  candidateName: string;
  keynotesFile: string;
  contacts: WebhookContact[];
}

export interface WebhookResponse {
  html: string;
  contacts: WebhookContact[];
}

export interface FinalizedEmailWebhookData {
  emailSubject: string;
  emailBody: string;
  clientList: WebhookContact[];
}


export const sendWebhook = async (data: WebhookData): Promise<WebhookResponse> => {
  console.log("Sending webhook data (mock mode):", data);
  
  // Simulate network delay for realistic demo experience
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  // Generate mock HTML email content based on candidate and contacts
  const mockHtml = generateMockEmailHTML(data.candidateName, data.contacts);
  
  console.log("Mock webhook response generated successfully");
  
  return {
    html: mockHtml,
    contacts: data.contacts
  } as WebhookResponse;
};

export const sendFinalizedEmailWebhook = async (data: FinalizedEmailWebhookData): Promise<void> => {
  console.log("Sending finalized email webhook data (mock mode):", data);
  
  // Simulate network delay for realistic demo experience
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  console.log("Mock finalized email webhook sent successfully");
  
  // In mock mode, we just simulate success
  return Promise.resolve();
};
